Q3. In Rails world, we have someting called polymorphic associations (http://guides.rubyonrails.org/association_basics.html#polymorphic-associations). Lets say in our web application, we can let users comment on photographs and articles. Some of rows in comments table are represented as following:

mysql> SELECT * FROM comments LIMIT 5;

+----+------------------+----------------+---------+
| id | commentable_type | commentable_id | user_id |
+----+------------------+----------------+---------+
| 1  +  Article         |       1        |    1    |
+----+------------------+----------------+---------+
| 2  +  Photo           |       1        |    1    |
+----+------------------+----------------+---------+
| 3  +  Photo           |       2        |    2    |
+----+------------------+----------------+---------+
| 4  +  Photo           |       2        |    2    |
+----+------------------+----------------+---------+
| 5  +  Article         |       1        |    2    |
+----+------------------+----------------+---------+

When we need to fetch comments of a user on a particular Article or Photo we form a query like:

mysql> EXPLAIN SELECT * FROM comments WHERE commentable_id = 1 AND commentable_type = 'Article' AND user_id = 1;

+-------------+------+---------------+---------+-------+---------+-------------+
| select_type | type |     key       | key_len |  ref  |  rows   |   Extra     |
+-------------+------+---------------+---------+-------+---------+-------------+
| SIMPLE      |  ALL |    NULL       |  NULL   |  NULL | 1000025 | Using where |
+-------------+------+---------------+---------+-------+---------+-------------+

It seems that we do not have any index on any of the columns. And whole comments table is scanned to fetch those comments.

3.1 We decide to index columns in comments table to optimize the SELECT query. What column(s) will you index in which order? Ask the exercise creator for a hint if you are confused.

ans) we will definitely not index commentable_type since it can take only two values: "article" and "photo". This means that on average article and photo occur in 50% of the rows. If we index it it will perform very poorly.

We can index commentable_id and user_id as they are foreign keys so it is a good idea to index them. We can create a composite index for this purpose. I think we need not worry about the order of indexing since the values for the columns is speciified. We are doing an exact seek here.

mysql> create index index_keys on comments(article_title,user_id);
Query OK, 0 rows affected (0.24 sec)
Records: 0  Duplicates: 0  Warnings: 0

mysql> select * from comments;
+---------------+---------+------------+-------------------+
| article_title | user_id | id         | text              |
+---------------+---------+------------+-------------------+
| article1      |   00008 | 0000000001 | comment 1         |
| article2      |   00010 | 0000000002 | comment 2         |
| article1      |   00006 | 0000000003 | comment 3         |
| article3      |   00011 | 0000000004 | comment 4         |
| article4      |   00008 | 0000000005 | comment 5         |
| article2      |   00010 | 0000000006 | comment 6         |
| article1      |   00010 | 0000000008 | i like sql        |
| article1      |   00008 | 0000000009 | comment 9         |
| article6      |   00007 | 0000000010 | this is good      |
| article6      |   00010 | 0000000011 | this is very good |
+---------------+---------+------------+-------------------+
10 rows in set (0.00 sec)


mysql> explain select * from comments where user_id = 8 and article_title = "article1";
+----+-------------+----------+------+---------------+------------+---------+-------------+------+-------------+
| id | select_type | table    | type | possible_keys | key        | key_len | ref         | rows | Extra       |
+----+-------------+----------+------+---------------+------------+---------+-------------+------+-------------+
|  1 | SIMPLE      | comments | ref  | index_keys    | index_keys | 34      | const,const |    2 | Using where |
+----+-------------+----------+------+---------------+------------+---------+-------------+------+-------------+
1 row in set (0.00 sec)

mysql> drop index index_keys on comments;
Query OK, 0 rows affected (0.23 sec)
Records: 0  Duplicates: 0  Warnings: 0

mysql> create index index_keys on comments(user_id, article_title);
Query OK, 0 rows affected (0.25 sec)
Records: 0  Duplicates: 0  Warnings: 0

mysql> explain select * from comments where user_id = 8 and article_title = "article1";
+----+-------------+----------+------+---------------+------------+---------+-------------+------+-------------+
| id | select_type | table    | type | possible_keys | key        | key_len | ref         | rows | Extra       |
+----+-------------+----------+------+---------------+------------+---------+-------------+------+-------------+
|  1 | SIMPLE      | comments | ref  | index_keys    | index_keys | 34      | const,const |    2 | Using where |
+----+-------------+----------+------+---------------+------------+---------+-------------+------+-------------+
1 row in set (0.00 sec)

as we can see, order of indexing does not matter in this case.
