Q2: We use EXPLAIN to optimize slow SQL queries used in our application. Lets say we have a comments table in our application that has a foreign key, user_id, referencing to users table. EXPLAINing the query that finds all the comments made by a user gives us following result.

mysql> EXPLAIN SELECT * FROM comments WHERE user_id = 41;

+-------------+------+---------------+---------+-------+---------+-------------+
| select_type | type |      key      | key_len | ref   |   rows  | Extra       |
+-------------+------+---------------+---------+-------+---------+-------------+
| SIMPLE      |  ALL |      NULL     |   NULL  | NULL  | 1002345 | Using where |
+-------------+------+---------------+---------+-------+---------+-------------+

mysql> SELECT count(id) FROM comments;

+-----------+
| count(id) |
+-----------+
| 1002345   |
+-----------+

2.1 The value under 'rows' column in the output of EXPLAIN query and SELECT query after it are same. What does it mean?

ans) It means that the first select statement will examine all the rows of the comments table.

2.2 Is the SELECT query optimal? If no, how do we optimize it?

ans) we can optimize it by indexing the user_id

mysql> explain select * from comments where user_id = 8;
+----+-------------+----------+------+---------------+------+---------+------+------+-------------+
| id | select_type | table    | type | possible_keys | key  | key_len | ref  | rows | Extra       |
+----+-------------+----------+------+---------------+------+---------+------+------+-------------+
|  1 | SIMPLE      | comments | ALL  | NULL          | NULL | NULL    | NULL |   10 | Using where |
+----+-------------+----------+------+---------------+------+---------+------+------+-------------+
1 row in set (0.00 sec)


mysql> create index user_id_part on comments (user_id);
Query OK, 0 rows affected (0.38 sec)
Records: 0  Duplicates: 0  Warnings: 0

mysql> explain select * from comments where user_id = 8;
+----+-------------+----------+------+---------------+--------------+---------+-------+------+-------+
| id | select_type | table    | type | possible_keys | key          | key_len | ref   | rows | Extra |
+----+-------------+----------+------+---------------+--------------+---------+-------+------+-------+
|  1 | SIMPLE      | comments | ref  | user_id_part  | user_id_part | 2       | const |    3 |       |
+----+-------------+----------+------+---------------+--------------+---------+-------+------+-------+
1 row in set (0.02 sec)

we can see that now only 3 rows are searched which correspond to the given user_id
